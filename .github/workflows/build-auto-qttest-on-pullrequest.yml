name: CI
# DOES NOT CREATE A RELEASE - builds Seamly2D Windows application, macOS DMG and AppImage and attaches to GH action run, runs unit tests on linux
# DOES NOT TEST SEAMLYME.EXE

# Trigger on pull requests before merge
on: [ pull_request ]

env:
  QT_VERSION: '5.15.2' # quotes required or YAML parser will interpret as float

jobs:

  build-appimage:
    name: 'Linux: Build AppImage'
    runs-on: ubuntu-22.04

    steps:
      - name: checkout code
        uses: actions/checkout@v3

      - name: install build dependencies
        run: |
          # ---------------------------------
          echo "-- install build dependencies --"
          sudo apt update
          sudo apt install -y libfuse2 build-essential git qt5-qmake qtbase5-dev libqt5xmlpatterns5-dev libqt5svg5-dev qttools5-dev-tools

      - name: build Seamly2D appimage
        # uses parameters from appimage-builder-recipe-jammy.yml to build appimage
        # Seamly2D-continuous-x86_64.AppImage
        run: |
          # ---------------------------------
          echo "-- get appimage-builder --"
          sudo wget -q https://github.com/AppImageCrafters/appimage-builder/releases/download/v1.1.0/appimage-builder-1.1.0-x86_64.AppImage -O /usr/local/bin/appimage-builder
          sudo chmod +x /usr/local/bin/appimage-builder
          
          # ---------------------------------
          echo "-- run appimage-builder with appimage-builder-recipe-jammy.yml --"
          appimage-builder --recipe dist/appimage-builder-recipe-jammy.yml --log INFO --skip-test

      - name: copy to final file name Seamly2D-x86_64.AppImage
        run: |
          mv Seamly2D-continuous-x86_64.AppImage Seamly2D-x86_64.AppImage

      - name: Upload Seamly2D-x86_64.AppImage artifact
        # upload Seamly2D-x86_64.AppImage as artifact to Github Workflows
        uses: actions/upload-artifact@v3
        with:
          name: Seamly2D-x86_64.AppImage
          path: './*AppImage*'

  build-linux-test:
    name: 'Linux: Run unit tests'
    runs-on: ubuntu-22.04

    steps:
      - name: checkout code
        uses: actions/checkout@v3

      - name: install build dependencies
        run: |
          # ---------------------------------
          echo "-- install build dependencies --"
          sudo add-apt-repository universe
          sudo apt update
          sudo apt install -y libfuse2 build-essential git qt5-qmake qtbase5-dev libqt5xmlpatterns5-dev libqt5svg5-dev qttools5-dev-tools

      - name: build Seamly2D & SeamlyMe for tests
        run: |
          # *********************************
          echo "-- show current directory --"
          echo $PWD
          
          # *********************************
          echo "-- make Seamly2D & SeamlyMe --"
          mkdir /home/runner/local
          qmake PREFIX=/home/runner/local Seamly2D.pro
          make -j$(nproc) && make install

      - name: install test dependencies
        # xvfb use to test built application within a framebuffer
        run: |
          # *********************************
          echo "-- install test dependencies (xvfb) --"
          sudo apt update
          sudo apt install -y xvfb

      # run the tests
      - name: test Seamly2D.exe
        run: |
          # *********************************
          echo "-- test Seamly2D with xvfb --"
          export LD_LIBRARY_PATH=/home/runner/local/lib64/Seamly2D
          xvfb-run -a make --silent check TESTARGS="-silent"

  build-windows:
    name: 'Windows: Build'
    runs-on: windows-latest

    steps:
      - name: checkout code
        uses: actions/checkout@v3

      - name: install msvc
        uses: ilammy/msvc-dev-cmd@v1
        with:
          # use Visual C++ 2022 latest, 14.34.xxxx
          toolset: '14.34'

      - name: install qt
        uses: jurplel/install-qt-action@v3
        with:
          version: ${{ env.QT_VERSION }}
          cache: true

      - name: make seamly2d.exe and seamlyme.exe
        run: |
          qmake.exe Seamly2D.pro -config release CONFIG+=noDebugSymbols CONFIG+=noTests
          nmake

      - name: create seamly2d-installer.exe
        # copy seamly2d and seamlyme directory trees prepared by windeployqt and create installer
        # uses parameters in seamly2d-installer.nsi to create the installer exe
        run: |
          mkdir ..\windows-build
          Copy-Item -Path 'src\app\seamly2d\bin\*' -Destination ..\windows-build -Recurse
          Copy-Item -Path 'src\app\seamlyme\bin\*' -Destination ..\windows-build -Recurse -Force
          Copy-Item -Path dist\seamly2d-installer.nsi -Destination ..\windows-build
          cd ..\windows-build\
          & 'C:\Program Files (x86)\NSIS\makensis.exe' seamly2d-installer.nsi

      - name: pack installer file into .zip
        run: |
          cd ..\windows-build\
          C:\"Program Files"\7-Zip\7z.exe a Seamly2D-windows.zip Seamly2D-installer.exe
          copy Seamly2D-windows.zip ..\Seamly2D\
    
      - name: Upload Seamly2D-windows.zip artifact
        # upload Seamly2D-windows.zip as artifact to Github Workflows
        uses: actions/upload-artifact@v3
        with:
          name: Seamly2D-windows.zip
          path: Seamly2D-windows.zip

  build-macos:
    name: 'macOS: Build'
    runs-on: macos-11

    steps:
      - name: checkout code
        uses: actions/checkout@v3

      - name: install qt
        uses: jurplel/install-qt-action@v3
        with:
          version: ${{ env.QT_VERSION }}
          cache: true

      - name: make Seamly2D for macos
        run: |
          sudo xcode-select -s /Applications/Xcode_11.7.app
          qmake Seamly2D.pro CONFIG+=noDebugSymbols CONFIG+=noTests
          make -j$(sysctl -n hw.logicalcpu)

      - name: Upload Seamly2D-macos.zip artifact
        # upload Seamly2D-installer.exe as artifact to Github Workflows
        uses: actions/upload-artifact@v3
        with:
          name: Seamly2D-macos.zip
          path: out/Seamly2D-macos.zip
