name: Build manual Windows

on:
  workflow_dispatch:
    inputs:
      logLevel:
        description: 'Log level'
        required: true
        default: 'warning'
      tags:
        description: 'Build manual Windows'

env:
  QT_SELECT: 5
  QT_VERSION: '5.15.2' # quotes required or YAML parser will interpret as float

# The tag name is Test-weekly-YYmmdd-HHMM to enable multiple tests per day
jobs:

  release-data:
    runs-on: ubuntu-20.04
    outputs:
      upload_url: ${{ steps.create-release-data.outputs.upload_url }}

    steps:
      - name: create name and tag
        id: create-name-and-tag
        run: |
          echo "TAG_NAME=Test-weekly-`date +"%F%H%M"`" >> $GITHUB_ENV
          echo "RELEASE_NAME=Test weekly `date +"%F%H%M"`" >> $GITHUB_ENV
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: create release data
        # output is 'upload_url'
        id: create-release-data
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.TAG_NAME }}
          release_name: ${{ env.RELEASE_NAME }}
          body: Manual test of Windows build, creates pre-release
          #create unpublished
          draft: false 
          # create pre-release
          prerelease: true 

      - name: show UPLOAD_URL
        #display upload_url then save it as a GITHUB ENV VARIABLE
        run: |
          echo ${{ steps.create-release-data.outputs.upload_url }} 
          echo "UPLOAD_URL=${{ steps.create-release-data.outputs.upload_url }}" >> $GITHUB_ENV
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}          

  windows:
    runs-on: windows-latest
    needs: release-data
    env:
      UPLOAD_URL: "${{ needs.release-data.outputs.upload_url }}"

    steps:
      - name: check upload URL
        # display upload_url
        run: |
          echo "${{ needs.release-data.outputs.upload_url }}"
          echo "${{ env.UPLOAD_URL }}"

      - name: checkout code
        uses: actions/checkout@v3

      - name: install msvc
        uses: ilammy/msvc-dev-cmd@v1.11.0
        with:
          # use SVC 2019 latest, 14.29.xxxx
          toolset: '14.29'

      - name: install qt
        uses: jurplel/install-qt-action@v3.0.0
        with:
          version: ${{ env.QT_VERSION }}

      - name: qmake seamly2d.exe and seamlyme.exe
        run: |
          qmake.exe Seamly2D.pro -r CONFIG+=no_ccache CONFIG+=noDebugSymbols
          nmake

      - name: create seamly2d-installer.exe
        # seamly2d.exe, seamlyme.exe, VC_redist, OpenSSL dlls, and create + code sign installer
        # uses parameters in seamly2d-installer.nsi to create the installer exe
        run: |
          mkdir ..\windows-build
          Get-ChildItem -Recurse -Include *.exe,*.dll | % { Copy-Item $_.FullName -force -destination ..\windows-build }
          windeployqt.exe --libdir ..\windows-build --plugindir ..\windows-build --release ..\windows-build\seamly2d.exe
          windeployqt.exe --force --libdir ..\windows-build --plugindir ..\windows-build --release ..\windows-build\seamlyme.exe
          copy .\dist\seamly2d-installer.nsi ..\windows-build\
          copy .\dist\win\VC_redist.x86.exe ..\windows-build\
          copy .\dist\win\VC_redist.x64.exe ..\windows-build\
          copy 'c:\Program Files\OpenSSL\libcrypto-1_1-x64.dll' ..\windows-build\
          copy 'c:\Program Files\OpenSSL\libssl-1_1-x64.dll' ..\windows-build\
          copy 'c:\Program Files\OpenSSL\bin\capi.dll' ..\windows-build\
          copy 'c:\Program Files\OpenSSL\bin\dasync.dll' ..\windows-build\
          New-Item '..\windows-build\translations' -ItemType Directory -Force | Out-Null
          Copy-Item 'share\translations\*.qm' '..\windows-build\translations' -Force -Recurse
          Copy-Item 'src\app\seamlyme\bin\diagrams.rcc' '..\windows-build'
          cd ..\windows-build\
          & 'C:\Program Files (x86)\NSIS\makensis.exe' seamly2d-installer.nsi

      #- name: code sign seamly2d-installer.exe
      #  run: |
      #    echo "${{ secrets.PFX_BASE64 }}" > cert.pfx.base64
      #    certutil -decode cert.pfx.base64 cert.pfx
      #    & 'C:\Program Files (x86)\Windows Kits\10\bin\x86\signtool.exe' sign /f cert.pfx /p ${{ secrets.PFX_PASSWORD }}  /fd sha256 /tr http://timestamp.comodoca.com/?td=sha256 /td sha256 /as /debug .\seamly2d-installer.exe

      - name: upload seamly2d-installer.exe
        uses: actions/upload-release-asset@v1.0.2
        #uses: softprops/action-gh-release@v0.1.14
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ env.UPLOAD_URL }}
          asset_path: ../windows-build/seamly2d-installer.exe
          asset_name: seamly2d-installer.exe
          asset_content_type: application/octet-stream
