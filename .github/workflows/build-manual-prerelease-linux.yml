name: Build manual Linux

on:
  workflow_dispatch:
    inputs:
      logLevel:
        description: 'Log level'
        required: true
        default: 'warning'
      tags:
        description: 'Build manual Linux'

# The tag name is Test-weekly-YYmmdd-HHMM to enable multiple tests per day
jobs:

  release-data:
    runs-on: ubuntu-22.04
    outputs:
      upload_url: ${{ steps.create-release-data.outputs.upload_url }}

    steps:
      - name: create name and tag
        id: create-name-and-tag
        run: |
          echo "TAG_NAME=Test-manual-`date +"%F%H%M"`" >> $GITHUB_ENV
          echo "RELEASE_NAME=Test manual `date +"%F%H%M"`" >> $GITHUB_ENV
          echo "CUR_DIR=$PWD" >> $GITHUB_ENV
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: create release data
        id: create-release-data
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.TAG_NAME }}
          release_name: ${{ env.RELEASE_NAME }}
          body: Manual test of Linux build, creates pre-release
          # create unpublished
          draft: false
          # create pre-release
          prerelease: true

      - name: show UPLOAD_URL
        #display upload_url then save it as a GITHUB ENV VARIABLE
        run: |
          echo ${{ steps.create-release-data.outputs.upload_url }} 

  linux:
    runs-on: ubuntu-22.04
    needs: release-data
    env:
      UPLOAD_URL: "${{ needs.release-data.outputs.upload_url }}"

    steps:
      - name: check upload URL
        # display upload_url
        run: |
          echo "${{ needs.release-data.outputs.upload_url }}"
          echo "${{ env.UPLOAD_URL }}"

      - name: checkout code
        uses: actions/checkout@v2.4.2
        #with:
          #submodules: true
          #fetch-depth: 0  
          
      - name: install build dependencies
        run: |  
          # ---------------------------------
          echo "-- install build dependencies --"
          sudo add-apt-repository universe
          sudo apt update
          sudo apt install -y libfuse2
          sudo apt install -y build-essential gettext git
          sudo apt install -y qttools5-dev libqt5xml5 libqt5svg5-dev libqt5xmlpatterns5-dev libdrm-dev
          sudo apt install -y '^libxcb.*-dev' libxcb-util-dev libx11-xcb-dev libglu1-mesa-dev libxrender-dev libxi-dev libxkbcommon-dev libxkbcommon-x11-dev

          #----------------------------------
          echo "-- install support for Wayland --"
          sudo apt install -y libwayland-bin libwayland-dev libmirwayland-dev

          # --------------------------------
          echo "-- install additional packages ---"
          sudo apt install -y nickle wish libgcrypt20 libjpeg-turbo8 liblz4-1 libpoppler118
          sudo apt install -y libsm6 libx11-xcb-dev libxau6 libxcb-render-util0 libxcb-sync1 libxcb-xinerama0 libxcb-xkb1 
          sudo apt install -y libxdmcp6 libxext6 libxfixes3 libxrender1 libxshmfence1 libxxf86vm1
          sudo apt install -y qt5-gtk-platformtheme qt5-image-formats-plugins qttranslations5-l10n qtwayland5

          # ---------------------------------
          echo "-- create AppDir, will be erased & recreated in appimage-builder script ------"
          sudo mkdir -p AppDir && pwd && ls -la

      - name: build Seamly2D appimage
        # uses parameters from appimage-builder-recipe.yml to build appimage
        # Seamly2D-continuous-x86_64.AppImage
        run: |
          # ---------------------------------
          echo "-- get appimage-builder --"
          #sudo wget -q https://github.com/AppImageCrafters/appimage-builder/releases/download/v1.1.0/appimage-builder-1.1.0-x86_64.AppImage -O /usr/local/bin/appimage-builder
          sudo wget -q https://github.com/AppImageCrafters/appimage-builder/releases/download/v1.1.0/appimage-builder-1.1.0-x86_64.AppImage -O /usr/local/bin/appimage-builder
          sudo chmod +x /usr/local/bin/appimage-builder
          
          # ---------------------------------
          echo "-- run appimage-builder with appimage-builder-recipe-test.yml --"
          appimage-builder --recipe dist/appimage-builder-recipe-test.yml --log INFO --skip-test

      - name: copy to final file name Seamly2D-amd64.AppImage
        run: |
          # ---------------------------------
          echo "-- find the Seamly2D appimage file & rename it --"   
          ls -la . | grep 'Seamly2D-continuous-x86_64.*'    
          mv Seamly2D-continuous-x86_64.AppImage Seamly2D-x86_64.AppImage

      - name: Upload Seamly2D-x86_64.AppImage artifact
        # upload Seamly2D-x86_64.AppImage as artifact to Github Workflows
        uses: actions/upload-artifact@v3.1.0
        with:
          name: Seamly2D-x86_64.AppImage
          path: './*AppImage*'

      - name: find file path
        id: path-lister
        uses: Rishabh510/Path-lister-action@1.0
        with:
          path: "."
          type: ".AppImage"

      - name: show file path
        run: |
          # ---------------------------------
          echo "-- show current directory --"          
          pwd
          echo "Found ${{ steps.path-lister.outputs.path_count }} file(s) with this extension:"
          for i in ${{ steps.path-lister.outputs.paths }}; do
          echo $i
          done

      - name: upload file as pre-release
        # uploads Seamly2D-x86_64.AppImage as pre-release to Github Releases
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ env.UPLOAD_URL }}
          asset_path: ./Seamly2D-x86_64.AppImage
          asset_name: ./Seamly2D-x86_64.AppImage
          asset_content_type: application/octet-stream
