name: Build weekly release

# cron format:
# minute (0 - 59)
# │ ┌───────────── hour (0 - 23)
# │ │ ┌───────────── day of the month (1 - 31)
# │ │ │ ┌───────────── month (1 - 12)
# │ │ │ │ ┌───────────── day of the week (0 - 6)
# │ │ │ │ │
# │ │ │ │ │
# │ │ │ │ │
#'* * * * *'
on:
  schedule:
    - cron: '0 0 * * MON'

env:
  QT_SELECT: 5
  QT_VERSION: '5.15.2' # quotes required or YAML parser will interpret as float

# The tag name is Test-weekly-YYmmdd-HHMM to enable multiple tests per day
jobs:

  release-data:
    runs-on: ubuntu-20.04
    outputs:
      upload_url: ${{ steps.create-release-data.outputs.upload_url }}

    steps:
      - name: create name and tag
        id: create-name-and-tag
        run: |
          echo "TAG_NAME=`date + "-" + "%F%H%M"`" >> $GITHUB_ENV
          echo "RELEASE_NAME=`date + "-" +"%F%H%M"`" >> $GITHUB_ENV
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: create release data
        # produces upload_url
        id: create-release-data
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.TAG_NAME }}
          release_name: ${{ env.RELEASE_NAME }}
          body: Automated weekly release
          draft: false
          prerelease: true

      - name: show UPLOAD_URL
        run: |
          echo ${{ steps.create-release-data.outputs.upload_url }}

  linux:
    runs-on: ubuntu-20.04
    needs: release-data
    env:
      UPLOAD_URL: "${{ needs.release-data.outputs.upload_url }}"

    steps:
      - name: checkout code
        uses: actions/checkout@v2.3.5

      - name: install kde and dependencies
        run: |
          # register kde neon repository
          echo 'deb http://archive.neon.kde.org/user focal main' | sudo tee /etc/apt/sources.list.d/neon.list
          curl https://origin.archive.neon.kde.org/public.key -o - | sudo apt-key add -
          # install build dependencies
          sudo apt update
          sudo apt install -y build-essential gettext git qt5-default qttools5-dev libqt5svg5-dev libqt5xmlpatterns5-dev
          sudo apt install -y '^libxcb.*-dev' libx11-xcb-dev libglu1-mesa-dev libxrender-dev libxi-dev libxkbcommon-dev libxkbcommon-x11-dev

      - name: build Seamly2D appimage
        # uses parameters from appimage-build.yml to build appimage
        # Seamly2D-continuous-x86_64.AppImage
        run: |
          sudo wget -q https://github.com/AppImageCrafters/appimage-builder/releases/download/v0.8.8/appimage-builder-0.8.8-4e7c15f-x86_64.AppImage -O /usr/local/bin/appimage-builder
          sudo chmod +x /usr/local/bin/appimage-builder
          appimage-builder --recipe dist/appimage-builder-recipe.yml --skip-test

      - name: copy to Seamly2D-x86_64.AppImage
        run: |
          sudo mv ./Seamly2D-continuous-x86_64.AppImage ./Seamly2D-x86_64.AppImage

      - name: upload seamly2d-x86_64.tar.gz artifact
        # uploads ./Seamly2D-x86_64.AppImage as artifact to Github Workflows
        uses: actions/upload-artifact@v2.2.4
        with:
          name: Seamly2D-x86_64.AppImage
          path: './*AppImage*'

      - name: find file path
        id: path-lister
        uses: Rishabh510/Path-lister-action@master
        with:
          path: "."
          type: ".AppImage"

      - name: show file path
        run: |
          pwd
          echo "Found ${{ steps.path-lister.outputs.path_count }} file(s) with this extension:"
          for i in ${{ steps.path-lister.outputs.paths }}; do
          echo $i
          done

      - name: upload file as pre-release
        # uploads seamly2d-x86_64.tar.gz as pre-release to Github Releases
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ env.UPLOAD_URL }}
          asset_path: ./Seamly2D-x86_64.AppImage
          asset_name: Seamly2D-x86_64.AppImage
          asset_content_type: application/octet-stream

  macos:
    runs-on: macos-latest
    needs: release-data
    env:
      UPLOAD_URL: "${{ needs.release-data.outputs.upload_url }}"

    steps:

      - name: checkout code
        uses: actions/checkout@v2.3.5

      - name: install qt
        uses: jurplel/install-qt-action@v2.14.0
        with:
          version: ${{ env.QT_VERSION }}

      - name: make Seamly2D for macos
        run: |
          qmake Seamly2D.pro -r CONFIG+=no_ccache CONFIG+=noDebugSymbols
          make

      - name: build dmg packages
        run: |
          hdiutil create -fs HFS+ -srcfolder src/app/seamly2d/bin/Seamly2D.app -volname "Seamly2D" Seamly2D.dmg
          hdiutil create -fs HFS+ -srcfolder src/app/seamlyme/bin/seamlyme.app -volname "SeamlyME" SeamlyME.dmg

      - name: pack package files into .zip
        run: |
          zip Seamly2D-macos.zip Seamly2D.dmg SeamlyME.dmg

      - name: upload Seamly2D-macos.zip as pre-release to Github Releases
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ env.UPLOAD_URL }}
          asset_path: ./Seamly2D-macos.zip
          asset_name: Seamly2D-macos.zip
          asset_content_type: application/zip

  windows:
    runs-on: windows-latest
    needs: release-data
    env:
      UPLOAD_URL: "${{ needs.release-data.outputs.upload_url }}"

    steps:

      - name: checkout code
        uses: actions/checkout@v2.3.5

      - name: install msvc
        uses: ilammy/msvc-dev-cmd@v1.10.0
        with:
          version: ${{ env.QT_VERSION }}
          # use SVC 2019 latest, 14.29.xxxx
          toolset: '14.29'

      - name: install qt
        uses: jurplel/install-qt-action@v2.14.0
        with:
          version: ${{ env.QT_VERSION }}

      - name: make seamly2d.exe and seamlyme.exe
        run: |
          qmake.exe Seamly2D.pro -r CONFIG+=no_ccache CONFIG+=noDebugSymbols
          nmake

      - name: create seamly2d-installer.exe
        # seamly2d.exe, seamlyme.exe, VC_redist, OpenSSL dlls, and create + code sign installer
        # uses parameters in seamly2d-installer.nsi to create the installer exe
        run: |
          mkdir ..\windows-build
          Get-ChildItem -Recurse -Include *.exe,*.dll | % { Copy-Item $_.FullName -force -destination ..\windows-build }
          windeployqt.exe --libdir ..\windows-build --plugindir ..\windows-build --release ..\windows-build\seamly2d.exe
          windeployqt.exe --force --libdir ..\windows-build --plugindir ..\windows-build --release ..\windows-build\seamlyme.exe
          copy .\dist\seamly2d-installer.nsi ..\windows-build\
          copy .\dist\win\VC_redist.x86.exe ..\windows-build\
          copy .\dist\win\VC_redist.x64.exe ..\windows-build\
          copy 'c:\Program Files\OpenSSL\libcrypto-1_1-x64.dll' ..\windows-build\
          copy 'c:\Program Files\OpenSSL\libssl-1_1-x64.dll' ..\windows-build\
          copy 'c:\Program Files\OpenSSL\bin\capi.dll' ..\windows-build\
          copy 'c:\Program Files\OpenSSL\bin\dasync.dll' ..\windows-build\
          New-Item '..\windows-build\translations' -ItemType Directory -Force | Out-Null
          Copy-Item 'share\translations\*.qm' '..\windows-build\translations' -Force -Recurse
          Copy-Item 'src\app\seamlyme\bin\diagrams.rcc' '..\windows-build'
          cd ..\windows-build\
          & 'C:\Program Files (x86)\NSIS\makensis.exe' seamly2d-installer.nsi

      - name: upload unsigned Seamly2D-installer.exe
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:

          upload_url: ${{ env.UPLOAD_URL }}
          asset_path: ../windows-build/Seamly2D-installer.exe
          asset_name: Seamly2D-installer.exe
          asset_content_type: application/octet-stream
