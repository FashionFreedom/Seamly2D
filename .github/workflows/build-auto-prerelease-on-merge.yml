name: build pre-release on merge

# trigger this workflow on merging a pull request into develop branch
on:
  pull_request:
    branch:
    - develop
    types: [closed]

env:
  QT_VERSION: '5.15.2' # quotes required or YAML parser will interpret as float

jobs:

  release-data:
    runs-on: ubuntu-22.04
    outputs:
      upload_url: ${{ steps.release-data.outputs.upload_url }}

    # The tag name is Pre-release-vYYYY-mm-dd.HHMM to distinguish between builds if there  are multiple pull-requests per day
    steps:
      - name: create name and tag
        id: create-name-and-tag
        run: |
          version_date_time="Pre-release-$(date +v%F.%H%M)"
          echo "TAG_NAME=$version_date_time" >> $GITHUB_ENV
          echo "RELEASE_NAME=$version_date_time" >> $GITHUB_ENV

      - name: create release data
        # output is 'upload_url'
        id: release-data
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name:  ${{ env.TAG_NAME }}
          release_name: ${{ env.RELEASE_NAME }}
          body: Automated pre-release from pull request
          # create published
          draft: false
          prerelease: true

  linux:
    runs-on: ubuntu-22.04
    needs: release-data
    env:
      UPLOAD_URL: "${{ needs.release-data.outputs.upload_url }}"

    steps:
      - name: checkout code
        uses: actions/checkout@v3
          
      - name: install build dependencies
        run: |  
          # ---------------------------------
          echo "-- install build dependencies --"
          sudo apt update
          sudo apt install -y libfuse2 build-essential git qt5-qmake qtbase5-dev libqt5xmlpatterns5-dev libqt5svg5-dev qttools5-dev-tools

      - name: build Seamly2D appimage
        # uses parameters from appimage-builder-recipe-jammy.yml to build appimage
        # Seamly2D-continuous-x86_64.AppImage
        run: |
          # ---------------------------------
          echo "-- get appimage-builder --"
          sudo wget -q https://github.com/AppImageCrafters/appimage-builder/releases/download/v1.1.0/appimage-builder-1.1.0-x86_64.AppImage -O /usr/local/bin/appimage-builder
          sudo chmod +x /usr/local/bin/appimage-builder
          
          # ---------------------------------
          echo "-- run appimage-builder with appimage-builder-recipe-jammy.yml --"
          appimage-builder --recipe dist/appimage-builder-recipe-jammy.yml --log INFO --skip-test

      - name: copy to final file name Seamly2D-x86_64.AppImage
        run: |
          mv Seamly2D-continuous-x86_64.AppImage Seamly2D-x86_64.AppImage

      - name: upload file as pre-release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ env.UPLOAD_URL }}
          asset_path: ./Seamly2D-x86_64.AppImage
          asset_name: Seamly2D-x86_64.AppImage
          asset_content_type: application/octet-stream

  macos:
    runs-on: macos-latest
    needs: release-data
    env:
      UPLOAD_URL: "${{ needs.release-data.outputs.upload_url }}"

    steps:
      - name: checkout code
        uses: actions/checkout@v3

      - name: install qt
        uses: jurplel/install-qt-action@v3
        with:
          version: ${{ env.QT_VERSION }}
          cache: true

      - name: make Seamly2D for macos
        run: |
          qmake Seamly2D.pro CONFIG+=no_ccache CONFIG+=noDebugSymbols
          make -j$(sysctl -n hw.logicalcpu)

      - name: build dmg packages
        run: |
          hdiutil create -fs HFS+ -srcfolder src/app/seamly2d/bin/Seamly2D.app -volname "Seamly2D" Seamly2D.dmg
          hdiutil create -fs HFS+ -srcfolder src/app/seamlyme/bin/seamlyme.app -volname "SeamlyME" SeamlyME.dmg

      - name: pack package files into .zip
        run: |
          zip Seamly2D-macos.zip Seamly2D.dmg SeamlyME.dmg

      - name: upload Seamly2D-macos.zip as pre-release to Github Releases
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ env.UPLOAD_URL }}
          asset_path: ./Seamly2D-macos.zip
          asset_name: Seamly2D-macos.zip
          asset_content_type: application/zip

  windows:
    runs-on: windows-latest
    needs: release-data
    env:
      UPLOAD_URL: "${{ needs.release-data.outputs.upload_url }}"

    steps:
      - name: checkout code
        uses: actions/checkout@v3

      - name: install msvc
        uses: ilammy/msvc-dev-cmd@v1

      - name: install qt
        uses: jurplel/install-qt-action@v3
        with:
          version: ${{ env.QT_VERSION }}
          cache: true

      - name: make seamly2d.exe and seamlyme.exe
        run: |
          qmake.exe Seamly2D.pro -r CONFIG+=no_ccache CONFIG+=noDebugSymbols
          nmake

      - name: create seamly2d-installer.exe
        # seamly2d.exe, seamlyme.exe, VC_redist, OpenSSL dlls, and create + code sign installer
        # uses parameters in seamly2d-installer.nsi to create the installer exe
        run: |
          mkdir ..\windows-build
          Get-ChildItem -Recurse -Include *.exe,*.dll | % { Copy-Item $_.FullName -force -destination ..\windows-build }
          # build executables
          windeployqt.exe --libdir ..\windows-build --plugindir ..\windows-build --release ..\windows-build\seamly2d.exe
          windeployqt.exe --force --libdir ..\windows-build --plugindir ..\windows-build --release ..\windows-build\seamlyme.exe
          # get latest msvc++ redistributable files
          curl https://aka.ms/vs/17/release/vc_redist.x64.exe --output ..\windows-build\vc_redist.x64.exe
          curl https://aka.ms/vs/17/release/vc_redist.x32.exe --output ..\windows-build\vc_redist.x32.exe
          # copy SSL libraries
          copy 'c:\Program Files\OpenSSL\libcrypto-1_1-x64.dll' ..\windows-build\
          copy 'c:\Program Files\OpenSSL\libssl-1_1-x64.dll' ..\windows-build\
          copy 'c:\Program Files\OpenSSL\bin\capi.dll' ..\windows-build\
          copy 'c:\Program Files\OpenSSL\bin\dasync.dll' ..\windows-build\
          # copy translations
          New-Item '..\windows-build\translations' -ItemType Directory -Force | Out-Null
          Copy-Item 'share\translations\*.qm' '..\windows-build\translations' -Force -Recurse
          # create the installer file
          copy .\dist\seamly2d-installer.nsi ..\windows-build\          
          cd ..\windows-build\
          & 'C:\Program Files (x86)\NSIS\makensis.exe' seamly2d-installer.nsi

      - name: pack installer file into .zip
        run: |
          cd ..\windows-build\
          C:\"Program Files"\7-Zip\7z.exe a Seamly2D-windows.zip Seamly2D-installer.exe

      - name: upload unsigned Seamly2D-windows.zip as pre-release to Github Releases
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ env.UPLOAD_URL }}
          asset_path: ../windows-build/Seamly2D-windows.zip
          asset_name: Seamly2D-windows.zip
          asset_content_type: application/zip
