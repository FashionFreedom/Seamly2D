name: build pre-release on merge

# trigger this workflow on merging a pull request into develop branch
on:
  pull_request:
    branch:
    - develop
    types: [closed]

env:
  QT_SELECT: 5
  QT_VERSION: '5.15.2' # quotes required or YAML parser will interpret as float


jobs:

  release-data:
    # run job 'release-data' after PR has been closed & merged
    if: github.event.action == 'closed' && github.event.pull_request.merged == true
    runs-on: ubuntu-22.04
    outputs:
      upload_url: ${{ steps.create-release-data.outputs.upload_url }}

    # The tag name is Pre-release-YYmmdd-HHMM to distinguish between builds if there  are multiple pull-requests per day
    steps:
      - name: create name and tag
        id: create-name-and-tag
        run: |
          echo "TAG_NAME=Pre-release-`date +"%F%H%M"`" >> $GITHUB_ENV
          echo "RELEASE_NAME=Pre-release `date +"%F%H%M"`" >> $GITHUB_ENV
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: create release data
        # produces upload_url
        id: create-release-data
        uses: ncipollo/release-action@v1.11.1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}        
          tag: ${{ env.TAG_NAME }}
          name: ${{ env.RELEASE_NAME }}
          body: Automated pre-release from pull request
          draft: false
          prerelease: true

      - name: show UPLOAD_URL
        run: |
          echo ${{ steps.create-release-data.outputs.upload_url }}

  linux:
    # run job 'linux' after PR has been closed & merged
    if: github.event.action == 'closed' && github.event.pull_request.merged == true
    runs-on: ubuntu-22.04
    needs: release-data
    env:
      UPLOAD_URL: "${{ needs.release-data.outputs.upload_url }}"

    steps:
      - name: checkout code
        uses: actions/checkout@v2.4.2
        #with:
          #submodules: true
          #fetch-depth: 0  
          
      - name: install build dependencies
        run: |  
          # ---------------------------------
          echo "-- install build dependencies --"
          sudo add-apt-repository universe
          sudo apt update
          sudo apt install -y libfuse2
          sudo apt install -y build-essential gettext git
          sudo apt install -y qttools5-dev libqt5xml5 libqt5svg5-dev libqt5xmlpatterns5-dev libdrm-dev
          sudo apt install -y '^libxcb.*-dev' libxcb-util-dev libx11-xcb-dev libglu1-mesa-dev libxrender-dev libxi-dev libxkbcommon-dev libxkbcommon-x11-dev

          #----------------------------------
          echo "-- install support for Wayland --"
          sudo apt install -y libwayland-bin libwayland-dev libmirwayland-dev

          # --------------------------------
          echo "-- install additional packages ---"
          sudo apt install -y nickle wish libgcrypt20 libjpeg-turbo8 liblz4-1 libpoppler118
          sudo apt install -y libsm6 libx11-xcb-dev libxau6 libxcb-render-util0 libxcb-sync1 libxcb-xinerama0 libxcb-xkb1 
          sudo apt install -y libxdmcp6 libxext6 libxfixes3 libxrender1 libxshmfence1 libxxf86vm1
          sudo apt install -y qt5-gtk-platformtheme qt5-image-formats-plugins qttranslations5-l10n qtwayland5

      - name: build Seamly2D appimage
        # uses parameters from appimage-builder-recipe-jammy.yml to build appimage
        # Seamly2D-continuous-x86_64.AppImage
        run: |
          # ---------------------------------
          echo "-- get appimage-builder --"
          sudo wget -q https://github.com/AppImageCrafters/appimage-builder/releases/download/v1.1.0/appimage-builder-1.1.0-x86_64.AppImage -O /usr/local/bin/appimage-builder
          sudo chmod +x /usr/local/bin/appimage-builder
          
          # ---------------------------------
          echo "-- run appimage-builder with appimage-builder-recipe-jammy.yml --"
          appimage-builder --recipe dist/appimage-builder-recipe-jammy.yml --log INFO --skip-test

      - name: copy to final file name Seamly2D-x86_64.AppImage
        run: |
          mv Seamly2D-continuous-x86_64.AppImage Seamly2D-x86_64.AppImage

      - name: Upload Seamly2D-x86_64.AppImage artifact
        # upload Seamly2D-x86_64.AppImage as artifact to Github Workflows
        uses: actions/upload-artifact@v3.1.1
        with:
          name: Seamly2D-x86_64.AppImage
          path: './*AppImage*'

      - name: find file path
        id: path-lister
        uses: Rishabh510/Path-lister-action@1.0
        with:
          path: "."
          type: ".AppImage"

      - name: show file path
        run: |
          # ---------------------------------
          echo "-- show current directory --"          
          pwd
          echo "Found ${{ steps.path-lister.outputs.path_count }} file(s) with this extension:"
          for i in ${{ steps.path-lister.outputs.paths }}; do
          echo $i
          done

      - name: upload file as pre-release
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ env.UPLOAD_URL }}
          asset_path: ./Seamly2D-x86_64.AppImage
          asset_name: Seamly2D-x86_64.AppImage
          asset_content_type: application/octet-stream

  macos:
    # run job 'macos' after PR has been closed & merged
    if: github.event.action == 'closed' && github.event.pull_request.merged == true
    runs-on: macos-latest
    needs: release-data
    env:
      UPLOAD_URL: "${{ needs.release-data.outputs.upload_url }}"

    steps:

      - name: checkout code
        uses: actions/checkout@v3

      - name: install qt
        uses: jurplel/install-qt-action@v3.0.0
        with:
          version: ${{ env.QT_VERSION }}

      - name: make Seamly2D for macos
        run: |
          qmake Seamly2D.pro -r CONFIG+=no_ccache CONFIG+=noDebugSymbols
          make

      - name: build dmg packages
        run: |
          hdiutil create -fs HFS+ -srcfolder src/app/seamly2d/bin/Seamly2D.app -volname "Seamly2D" Seamly2D.dmg
          hdiutil create -fs HFS+ -srcfolder src/app/seamlyme/bin/seamlyme.app -volname "SeamlyME" SeamlyME.dmg

      - name: pack package files into .zip
        run: |
          zip Seamly2D-macos.zip Seamly2D.dmg SeamlyME.dmg

      - name: upload Seamly2D-macos.zip as pre-release to Github Releases
        uses: tanyagray/action-upload-release-asset@v1.1.3
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ env.UPLOAD_URL }}
          asset_path: ./Seamly2D-macos.zip
          asset_name: Seamly2D-macos.zip
          asset_content_type: application/zip

  windows:
    # run job 'windows' after PR has been closed & merged
    if: github.event.action == 'closed' && github.event.pull_request.merged == true
    runs-on: windows-latest
    needs: release-data
    env:
      UPLOAD_URL: "${{ needs.release-data.outputs.upload_url }}"

    steps:

      - name: checkout code
        uses: actions/checkout@v3

      - name: install msvc
        uses: ilammy/msvc-dev-cmd@v1.12.0
        with:
          version: ${{ env.QT_VERSION }}
          # use SVC 2019 latest, 14.29.xxxx
          toolset: '14.29'

      - name: install qt
        uses: jurplel/install-qt-action@v3.0.0
        with:
          version: ${{ env.QT_VERSION }}

      - name: make seamly2d.exe and seamlyme.exe
        run: |
          qmake.exe Seamly2D.pro -r CONFIG+=no_ccache CONFIG+=noDebugSymbols
          nmake

      - name: create seamly2d-installer.exe
        # seamly2d.exe, seamlyme.exe, VC_redist, OpenSSL dlls, and create + code sign installer
        # uses parameters in seamly2d-installer.nsi to create the installer exe
        run: |
          mkdir ..\windows-build
          Get-ChildItem -Recurse -Include *.exe,*.dll | % { Copy-Item $_.FullName -force -destination ..\windows-build }
          windeployqt.exe --libdir ..\windows-build --plugindir ..\windows-build --release ..\windows-build\seamly2d.exe
          windeployqt.exe --force --libdir ..\windows-build --plugindir ..\windows-build --release ..\windows-build\seamlyme.exe
          copy .\dist\seamly2d-installer.nsi ..\windows-build\
          copy .\dist\win\VC_redist.x86.exe ..\windows-build\
          copy .\dist\win\VC_redist.x64.exe ..\windows-build\
          copy 'c:\Program Files\OpenSSL\libcrypto-1_1-x64.dll' ..\windows-build\
          copy 'c:\Program Files\OpenSSL\libssl-1_1-x64.dll' ..\windows-build\
          copy 'c:\Program Files\OpenSSL\bin\capi.dll' ..\windows-build\
          copy 'c:\Program Files\OpenSSL\bin\dasync.dll' ..\windows-build\
          New-Item '..\windows-build\translations' -ItemType Directory -Force | Out-Null
          Copy-Item 'share\translations\*.qm' '..\windows-build\translations' -Force -Recurse
          Copy-Item 'src\app\seamlyme\bin\diagrams.rcc' '..\windows-build'
          cd ..\windows-build\
          & 'C:\Program Files (x86)\NSIS\makensis.exe' seamly2d-installer.nsi

      - name: pack installer file into .zip
        run: |
          cd ..\windows-build\
          C:\"Program Files"\7-Zip\7z.exe a Seamly2D-windows.zip Seamly2D-installer.exe

      - name: upload unsigned Seamly2D-windows.zip as pre-release to Github Releases
        uses: tanyagray/action-upload-release-asset@v1.1.3
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ env.UPLOAD_URL }}
          asset_path: ../windows-build/Seamly2D-windows.zip
          asset_name: Seamly2D-windows.zip
          asset_content_type: application/zip
